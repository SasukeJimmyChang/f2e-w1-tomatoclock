{"version":3,"sources":["components/Tomato/index.js","components/Timer/index.js","App.js","serviceWorker.js","index.js"],"names":["TomatoBody","styled","div","_templateObject","Leaves","_templateObject2","Tomato","_ref","props","Object","esm_extends","react_default","a","createElement","TimerWrapper","h1","Timer_templateObject","Timer","App","className","components_Tomato","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wzCAGA,IAAMA,EAAaC,IAAOC,IAAVC,KAqBVC,EAASH,IAAOC,IAAVG,KA8CGC,EAXA,SAAAC,GAAkB,IAAZC,EAAYC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC/B,OACEI,EAAAC,EAAAC,cAACb,EAAeQ,EACdG,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,0IC/DN,IAAMU,EAAeb,IAAOc,GAAVC,KAcHC,EAPD,SAAAV,GAAkB,IAAZC,EAAYC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC9B,OACEI,EAAAC,EAAAC,cAACC,EAAiBN,EAAlB,uBCIWU,MAXf,WACE,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAACO,EAAD,CAAQD,UAAU,aAClBR,EAAAC,EAAAC,cAACQ,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8186dcc2.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TomatoBody = styled.div`\n  position: relative;\n  width: 300px;\n  height: 270px;\n  background-color: #f05550;\n  border: 10px solid #e04540;\n  border-width: 4px 8px 10px 4px;\n  border-radius: 90% 100%;\n  animation: tomatoRoll 1s alternate infinite;\n  ::before {\n    content: \"\";\n    position: absolute;\n    width: 8%;\n    height: 9%;\n    top: 20%;\n    left: 12%;\n    border-radius: 100%;\n    background-color: rgba(255,255,255, 0.5);\n  }\n`;\n\nconst Leaves = styled.div`\n  position: absolute;\n  width: 10%;\n  height: 40%;\n  top: -12%;\n  background-color: #50af33;\n  left: 45%;\n  border-radius: 10% 90%;\n  :nth-child(2) {\n    top: -6%;\n    left: 60%;\n    transform: rotate(70deg);\n  }\n\n  :nth-child(3) {\n    top: 8%;\n    left: 65%;\n    height: 40%;\n    transform: rotate(110deg);\n  }\n\n  :nth-child(4) {\n    top: 0%;\n    left: 35%;\n    height: 40%;\n    transform: rotate(120deg);\n  }\n\n  :nth-child(5) {\n    top: 22%;\n    left: 60%;\n    transform: rotate(150deg);\n  }\n`;\n\nconst Tomato = ({ ...props }) => {\n  return (\n    <TomatoBody {...props}>\n      <Leaves />\n      <Leaves />\n      <Leaves />\n      <Leaves />\n      <Leaves />\n    </TomatoBody>\n  );\n};\nexport default Tomato;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TimerWrapper = styled.h1`\n  position: relative;\n  width: 300px;\n  color: #f05550;\n`;\n\n\nconst Timer = ({ ...props }) => {\n  return (\n    <TimerWrapper {...props}>\n        TOMATO 25:00\n    </TimerWrapper>\n  );\n};\nexport default Timer;\n","import React from 'react';\nimport Tomato from './components/Tomato';\nimport Timer from './components/Timer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Tomato className=\"App-logo\" />\n        <Timer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}