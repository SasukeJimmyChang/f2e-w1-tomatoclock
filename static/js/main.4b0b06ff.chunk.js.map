{"version":3,"sources":["components/Tomato/index.js","components/Buttons/Button.js","components/Buttons/FabButton.js","components/TestTool/index.js","components/Timer/index.js","App.js","serviceWorker.js","index.js"],"names":["tomatoRoll","keyframes","_templateObject","TomatoBody","styled","div","_templateObject2","Leaves","_templateObject3","Tomato","_ref","props","Object","esm_extends","react_default","a","createElement","ButtonBasic","button","Button_templateObject","Button","children","onClick","hidden","objectWithoutProperties","assign","FabButton_templateObject","FabButton","FabButton_ButtonBasic","TestToolWrapper","TestTool_templateObject","TestTool","onClick1","onClick2","Buttons_FabButton","TimerWrapper","h1","Timer_templateObject","Timer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","state","seconds","setState","done","pause","alert","setSeconds","intervalId","play","setInterval","clearInterval","_this2","components_TestTool","Math","floor","Buttons_Button","React","PureComponent","App","className","components_Tomato","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b0b06ff.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst tomatoRoll = keyframes`\n  to {\n    transform: scale(1.05, 0.95);\n  }\n`;\n\nconst TomatoBody = styled.div`\n  position: relative;\n  width: 300px;\n  height: 270px;\n  background-color: #f05550;\n  border: 10px solid #e04540;\n  border-width: 4px 8px 10px 4px;\n  border-radius: 90% 100%;\n  animation: ${tomatoRoll} 1s alternate infinite;\n  ::before {\n    content: '';\n    position: absolute;\n    width: 8%;\n    height: 9%;\n    top: 20%;\n    left: 12%;\n    border-radius: 100%;\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n\nconst Leaves = styled.div`\n  position: absolute;\n  width: 10%;\n  height: 40%;\n  top: -12%;\n  background-color: #50af33;\n  left: 45%;\n  border-radius: 10% 90%;\n  :nth-child(2) {\n    top: -6%;\n    left: 60%;\n    transform: rotate(70deg);\n  }\n\n  :nth-child(3) {\n    top: 8%;\n    left: 65%;\n    height: 40%;\n    transform: rotate(110deg);\n  }\n\n  :nth-child(4) {\n    top: 0%;\n    left: 35%;\n    height: 40%;\n    transform: rotate(120deg);\n  }\n\n  :nth-child(5) {\n    top: 22%;\n    left: 60%;\n    transform: rotate(150deg);\n  }\n`;\n\nconst Tomato = ({ ...props }) => {\n  return (\n    <TomatoBody {...props}>\n      <Leaves />\n      <Leaves />\n      <Leaves />\n      <Leaves />\n      <Leaves />\n    </TomatoBody>\n  );\n};\nexport default Tomato;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ButtonBasic = styled.button`\n  position: relative;\n  width: 300px;\n  background-color: #f05550;\n  border: 2px solid #e04540;\n  border-radius: 1em;\n  color: white;\n  font-size: 1em;\n  padding: 0.25em;\n  margin-top: 0.5em;\n  cursor: pointer;\n  :hover {\n    background-color: #ff6560;\n  }\n`;\n\nconst Button = ({ children, onClick, hidden, ...props }) => {\n  return (\n    <ButtonBasic onClick={onClick} hidden={hidden} {...props}>\n      {children}\n    </ButtonBasic>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ButtonBasic = styled.button`\n  position: relative;\n  background-color: #f05550;\n  border: 2px solid #e04540;\n  border-radius: 1em;\n  color: white;\n  font-size: 1rem;\n  padding: 0.25em;\n  margin-top: 0.5em;\n  cursor: pointer;\n  :hover {\n    background-color: #ff6560;\n  }\n`;\n\nconst FabButton = ({ children, onClick, hidden, ...props }) => {\n  return (\n    <ButtonBasic onClick={onClick} hidden={hidden} {...props}>\n      {children}\n    </ButtonBasic>\n  );\n};\n\nexport default FabButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FabButton } from '../Buttons';\n\nconst TestToolWrapper = styled.div`\n  width: 100％;\n  color: white;\n  font-size: 1rem;\n`;\n\nconst TestTool = ({ children, onClick1, onClick2, hidden, ...props }) => {\n\n    return (\n      <TestToolWrapper>\n        測試\n        <FabButton onClick={onClick1}>3秒</FabButton>\n        <FabButton onClick={onClick2}>25分鐘</FabButton>\n      </TestToolWrapper>\n    );\n}\n\nexport default TestTool;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '../Buttons';\nimport TestTool from '../../components/TestTool';\n\nconst TimerWrapper = styled.h1`\n  position: relative;\n  width: 300px;\n  color: #f05550;\n`;\n\nconst minutes = seconds =>\n  Math.floor(seconds / 60) +\n  ' : ' +\n  (seconds % 60 < 10 ? '0' + (seconds % 60) : seconds % 60);\n\nclass Timer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 1500,\n      intervalId: '',\n      play: false\n    };\n  }\n\n  start = () => {\n    this.state.seconds > 0\n      ? this.setState({ seconds: this.state.seconds - 1 })\n      : this.done();\n  };\n  done = () => {\n    this.pause();\n    alert('done')\n  };\n\n  play() {\n    let intervalId = setInterval(this.start, 1000);\n    this.setState({ intervalId: intervalId, play: true });\n  }\n\n  pause() {\n    clearInterval(this.state.intervalId);\n    this.setState({ play: false });\n  }\n  setSeconds = seconds => () => {\n    this.setState({ seconds });\n  };\n\n  render() {\n    return (\n      <TimerWrapper>\n        <TestTool\n          onClick1={this.setSeconds(3)}\n          onClick2={this.setSeconds(1500)}\n        />\n        {minutes(this.state.seconds)}\n        <Button\n          onClick={() => this.play()}\n          hidden={this.state.play ? true : false}\n        >\n          start\n        </Button>\n        <Button\n          onClick={() => this.pause()}\n          hidden={this.state.play ? false : true}\n        >\n          stop\n        </Button>\n      </TimerWrapper>\n    );\n  }\n}\nexport default Timer;\n","import React from 'react';\nimport Tomato from './components/Tomato';\nimport Timer from './components/Timer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Tomato />\n        <Timer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}