{"version":3,"sources":["components/Tomato/index.js","components/Timer/index.js","App.js","serviceWorker.js","index.js"],"names":["tomatoRoll","keyframes","_templateObject","TomatoBody","styled","div","_templateObject2","Leaves","_templateObject3","Tomato","_ref","props","Object","esm_extends","react_default","a","createElement","TimerWrapper","h1","Timer_templateObject","Button","button","Timer_templateObject2","Timer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","state","seconds","setState","pause","intervalId","play","setInterval","clearInterval","_this2","Math","floor","onClick","hidden","React","PureComponent","App","className","components_Tomato","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w6CAGA,IAAMA,EAAaC,YAAHC,KAMVC,EAAaC,IAAOC,IAAVC,IAQDN,GAaTO,EAASH,IAAOC,IAAVG,KA8CGC,EAXA,SAAAC,GAAkB,IAAZC,EAAYC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC/B,OACEI,EAAAC,EAAAC,cAACb,EAAeQ,EACdG,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,MACAO,EAAAC,EAAAC,cAACT,EAAD,qgBCrEN,IAAMU,EAAeb,IAAOc,GAAVC,KAMZC,EAAShB,IAAOiB,OAAVC,KAkDGC,cA/Bb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAZ,OAAAa,EAAA,EAAAb,CAAAc,KAAAH,IACjBC,EAAAZ,OAAAe,EAAA,EAAAf,CAAAc,KAAAd,OAAAgB,EAAA,EAAAhB,CAAAW,GAAAM,KAAAH,KAAMf,KAQRmB,MAAQ,kBAAMN,EAAKO,MAAMC,QAAQ,EAAER,EAAKS,SAAS,CAAED,QAASR,EAAKO,MAAMC,QAAU,IAAKR,EAAKU,SAPzFV,EAAKO,MAAQ,CACXC,QAAS,KACTG,WAAY,GACZC,MAAM,GALSZ,sEAYjB,IAAIW,EAAaE,YAAYX,KAAKI,MAAO,KACzCJ,KAAKO,SAAS,CAAEE,WAAYA,EAAYC,MAAM,oCAI9CE,cAAcZ,KAAKK,MAAMI,YACzBT,KAAKO,SAAS,CAAEG,MAAM,qCAGf,IAxBKJ,EAwBLO,EAAAb,KACP,OACEZ,EAAAC,EAAAC,cAACC,EAAD,MA1BUe,EA2BCN,KAAKK,MAAMC,QA3BDQ,KAAKC,MAAMT,EAAU,IAAM,OAASA,EAAU,GAAK,GAAK,IAAMA,EAAU,GAAKA,EAAU,KA4B1GlB,EAAAC,EAAAC,cAACI,EAAD,CAAQsB,QAAS,kBAAMH,EAAKH,QAAQO,SAAQjB,KAAKK,MAAMK,MAAvD,SACAtB,EAAAC,EAAAC,cAACI,EAAD,CAAQsB,QAAS,kBAAMH,EAAKL,SAASS,QAAQjB,KAAKK,MAAMK,MAAxD,gBA3BYQ,IAAMC,qBCXXC,MAXf,WACE,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,cAChBjC,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.641bde51.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst tomatoRoll = keyframes`\r\n  to {\r\n    transform: scale(1.05, 0.95);\r\n  }\r\n`;\r\n\r\nconst TomatoBody = styled.div`\r\n  position: relative;\r\n  width: 300px;\r\n  height: 270px;\r\n  background-color: #f05550;\r\n  border: 10px solid #e04540;\r\n  border-width: 4px 8px 10px 4px;\r\n  border-radius: 90% 100%;\r\n  animation: ${tomatoRoll} 1s alternate infinite;\r\n  ::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 8%;\r\n    height: 9%;\r\n    top: 20%;\r\n    left: 12%;\r\n    border-radius: 100%;\r\n    background-color: rgba(255,255,255, 0.5);\r\n  }\r\n`;\r\n\r\nconst Leaves = styled.div`\r\n  position: absolute;\r\n  width: 10%;\r\n  height: 40%;\r\n  top: -12%;\r\n  background-color: #50af33;\r\n  left: 45%;\r\n  border-radius: 10% 90%;\r\n  :nth-child(2) {\r\n    top: -6%;\r\n    left: 60%;\r\n    transform: rotate(70deg);\r\n  }\r\n\r\n  :nth-child(3) {\r\n    top: 8%;\r\n    left: 65%;\r\n    height: 40%;\r\n    transform: rotate(110deg);\r\n  }\r\n\r\n  :nth-child(4) {\r\n    top: 0%;\r\n    left: 35%;\r\n    height: 40%;\r\n    transform: rotate(120deg);\r\n  }\r\n\r\n  :nth-child(5) {\r\n    top: 22%;\r\n    left: 60%;\r\n    transform: rotate(150deg);\r\n  }\r\n`;\r\n\r\nconst Tomato = ({ ...props }) => {\r\n  return (\r\n    <TomatoBody {...props}>\r\n      <Leaves />\r\n      <Leaves />\r\n      <Leaves />\r\n      <Leaves />\r\n      <Leaves />\r\n    </TomatoBody>\r\n  );\r\n};\r\nexport default Tomato;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TimerWrapper = styled.h1`\r\n  position: relative;\r\n  width: 300px;\r\n  color: #f05550;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  position: relative;\r\n  width: 300px;\r\n  background-color: #f05550;\r\n  border: 2px solid #e04540;\r\n  border-radius: 1em;\r\n  color: white;\r\n  font-size: 1em;\r\n  padding: .25em;\r\n  margin-top: .5em;\r\n  cursor: pointer;\r\n  :hover {\r\n    background-color: #ff6560;\r\n  }\r\n`;\r\n\r\nconst minutes = seconds => Math.floor(seconds / 60) + ' : ' + (seconds % 60 < 10 ? '0' + seconds % 60 : seconds % 60);\r\n\r\nclass Timer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      seconds: 1500,\r\n      intervalId: '',\r\n      play: false\r\n    };\r\n  }\r\n\r\n  start = () => this.state.seconds>0?this.setState({ seconds: this.state.seconds - 1 }):this.pause();\r\n\r\n  play() {\r\n    let intervalId = setInterval(this.start, 1000)\r\n    this.setState({ intervalId: intervalId, play: true })\r\n  }\r\n\r\n  pause() {\r\n    clearInterval(this.state.intervalId)\r\n    this.setState({ play: false })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TimerWrapper>\r\n        {minutes(this.state.seconds)}\r\n        <Button onClick={() => this.play()} hidden={this.state.play ? true : false} >start</Button>\r\n        <Button onClick={() => this.pause()} hidden={this.state.play ? false : true} >stop</Button>\r\n      </TimerWrapper>\r\n    );\r\n  }\r\n};\r\nexport default Timer;\r\n","import React from 'react';\r\nimport Tomato from './components/Tomato';\r\nimport Timer from './components/Timer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Tomato />\r\n        <Timer />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}