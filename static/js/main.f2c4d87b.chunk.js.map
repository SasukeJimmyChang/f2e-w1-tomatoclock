{"version":3,"sources":["components/Tomato/index.js","components/TakeBreak/index.js","components/Buttons/Button.js","components/Buttons/FabButton.js","components/TestTool/index.js","components/Timer/index.js","containers/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["tomatoRoll","keyframes","_templateObject","TomatoBody","styled","div","_templateObject2","Leaves","_templateObject3","Tomato","_ref","props","Object","esm_extends","react_default","a","createElement","TakeBreakRoll","TakeBreak_templateObject","TakeBreakBody","TakeBreak_templateObject2","TakeBreak","ButtonBasic","button","Button_templateObject","Button","children","onClick","hidden","objectWithoutProperties","assign","FabButton_templateObject","FabButton","FabButton_ButtonBasic","TestToolWrapper","TestTool_templateObject","TestTool","onClick1","onClick2","Buttons_FabButton","TimerWrapper","h1","Timer_templateObject","Timer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","state","seconds","setState","done","onFinish","pause","takeBreak","setSeconds","intervalId","play","setInterval","clearInterval","console","log","_this2","components_TestTool","Math","floor","Buttons_Button","React","PureComponent","AppHeader","MainContainer_templateObject","MainContainer","components_Tomato","components_TakeBreak","components_Timer","App","containers_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2c4d87b.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst tomatoRoll = keyframes`\n  to {\n    transform: scale(1.05, 0.95);\n  }\n`;\n\nconst TomatoBody = styled.div`\n  position: relative;\n  width: 300px;\n  height: 270px;\n  background-color: #f05550;\n  border: 10px solid #e04540;\n  border-width: 4px 8px 10px 4px;\n  border-radius: 90% 100%;\n  animation: ${tomatoRoll} 1s alternate infinite;\n  ::before {\n    content: '';\n    position: absolute;\n    width: 8%;\n    height: 9%;\n    top: 20%;\n    left: 12%;\n    border-radius: 100%;\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n\nconst Leaves = styled.div`\n  position: absolute;\n  width: 10%;\n  height: 40%;\n  top: -12%;\n  background-color: #50af33;\n  left: 45%;\n  border-radius: 10% 90%;\n  :nth-child(2) {\n    top: -6%;\n    left: 60%;\n    transform: rotate(70deg);\n  }\n\n  :nth-child(3) {\n    top: 8%;\n    left: 65%;\n    height: 40%;\n    transform: rotate(110deg);\n  }\n\n  :nth-child(4) {\n    top: 0%;\n    left: 35%;\n    height: 40%;\n    transform: rotate(120deg);\n  }\n\n  :nth-child(5) {\n    top: 22%;\n    left: 60%;\n    transform: rotate(150deg);\n  }\n`;\n\nconst Tomato = ({ ...props }) => {\n  return (\n    <TomatoBody {...props}>\n      <Leaves />\n      <Leaves />\n      <Leaves />\n      <Leaves />\n      <Leaves />\n    </TomatoBody>\n  );\n};\nexport default Tomato;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst TakeBreakRoll = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst TakeBreakBody = styled.div`\n  position: relative;\n  width: 200px;\n  height: 200px;\n  background-color: #50f0f0;\n  border: 10px solid #40e0e0;\n  border-width: 4px 8px 10px 4px;\n  border-radius: 90% 100%;\n  animation: ${TakeBreakRoll} 10s linear infinite;\n  ::before {\n    content: '';\n    position: absolute;\n    width: 8%;\n    height: 9%;\n    top: 20%;\n    left: 12%;\n    border-radius: 100%;\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n  ::after {\n    content: 'TakeBreak...';\n    position: absolute;\n    top: -20%;\n    left: 25%;\n  }\n`;\n\nconst TakeBreak = ({ ...props }) => {\n  return (\n    <TakeBreakBody {...props}>\n    </TakeBreakBody>\n  );\n};\nexport default TakeBreak;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ButtonBasic = styled.button`\n  position: relative;\n  width: 300px;\n  background-color: #f05550;\n  border: 2px solid #e04540;\n  border-radius: 1em;\n  color: white;\n  font-size: 1em;\n  padding: 0.25em;\n  margin-top: 0.5em;\n  cursor: pointer;\n  :hover {\n    background-color: #ff6560;\n  }\n`;\n\nconst Button = ({ children, onClick, hidden, ...props }) => {\n  return (\n    <ButtonBasic onClick={onClick} hidden={hidden} {...props}>\n      {children}\n    </ButtonBasic>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ButtonBasic = styled.button`\n  position: relative;\n  background-color: #f05550;\n  border: 2px solid #e04540;\n  border-radius: 1em;\n  color: white;\n  font-size: 1rem;\n  padding: 0.25em;\n  margin-top: 0.5em;\n  cursor: pointer;\n  :hover {\n    background-color: #ff6560;\n  }\n`;\n\nconst FabButton = ({ children, onClick, hidden, ...props }) => {\n  return (\n    <ButtonBasic onClick={onClick} hidden={hidden} {...props}>\n      {children}\n    </ButtonBasic>\n  );\n};\n\nexport default FabButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FabButton } from '../Buttons';\n\nconst TestToolWrapper = styled.div`\n  width: 100％;\n  color: white;\n  font-size: 1rem;\n`;\n\nconst TestTool = ({ children, onClick1, onClick2, hidden, ...props }) => {\n\n    return (\n      <TestToolWrapper>\n        測試\n        <FabButton onClick={onClick1}>3秒</FabButton>\n        <FabButton onClick={onClick2}>25分鐘</FabButton>\n      </TestToolWrapper>\n    );\n}\n\nexport default TestTool;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '../Buttons';\nimport TestTool from '../../components/TestTool';\n\nconst TimerWrapper = styled.h1`\n  position: relative;\n  width: 300px;\n  color: #f05550;\n`;\n\nconst minutes = seconds =>\n  Math.floor(seconds / 60) +\n  ' : ' +\n  (seconds % 60 < 10 ? '0' + (seconds % 60) : seconds % 60);\n\nclass Timer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 1500,\n      intervalId: '',\n      play: false\n    };\n  }\n\n  start = () => {\n    this.state.seconds > 0\n      ? this.setState({ seconds: this.state.seconds - 1 })\n      : this.done();\n  };\n  done = () => {\n    const {onFinish} =this.props;\n    this.pause();\n    onFinish();\n    this.takeBreak();\n  };\n\n  play() {\n    let intervalId = setInterval(this.start, 1000);\n    this.setState({ intervalId: intervalId, play: true });\n  }\n\n  pause() {\n    clearInterval(this.state.intervalId);\n    this.setState({ play: false });\n  }\n  setSeconds = seconds => () => {\n    this.setState({ seconds });\n  };\n\n  takeBreak() {\n    this.setState({ seconds: 300 });\n    console.log('takeBreak');\n    this.play('takeBreak');\n  }\n\n  render() {\n    \n    return (\n      <TimerWrapper>\n        <TestTool\n          onClick1={this.setSeconds(3)}\n          onClick2={this.setSeconds(1500)}\n        />\n        {minutes(this.state.seconds)}\n        <Button\n          onClick={() => this.play()}\n          hidden={this.state.play ? true : false}\n        >\n          start\n        </Button>\n        <Button\n          onClick={() => this.pause()}\n          hidden={this.state.play ? false : true}\n        >\n          stop\n        </Button>\n      </TimerWrapper>\n    );\n  }\n}\nexport default Timer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Tomato from '../components/Tomato';\nimport TakeBreak from '../components/TakeBreak';\nimport Timer from '../components/Timer';\n\nconst AppHeader = styled.div`\n   {\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    text-align: center;\n  }\n`;\n\nclass MainContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      takeBreak: false,\n    };\n  }\n  onFinish = () => {\n    console.log('Finish');\n    this.setState({takeBreak: true});\n  };\n  render() {\n    return (\n      <AppHeader>\n        <Tomato hidden={this.state.takeBreak}/>\n        <TakeBreak hidden={!this.state.takeBreak} />\n        <Timer onFinish={this.onFinish} takeBreak={this.state.takeBreak} />\n      </AppHeader>\n    );\n  }\n}\n\nexport default MainContainer;\n","import React from 'react';\nimport MainContainer from \"./containers/MainContainer\";\n\nfunction App() {\n  return (\n    <MainContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}